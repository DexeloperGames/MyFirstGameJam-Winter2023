[gd_resource type="VisualShader" load_steps=7 format=3 uid="uid://brf3t27agx0i3"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_8ka7i"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_u2s4v"]
source = 5

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_7qqau"]
parameter_name = "Color_Index"
hint = 1
max = 4

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_sl58a"]
size = Vector2(1218.27, 260.166)
expression = "global uniform vec4 primitive_color_0;
global uniform vec4 primitive_color_1;
global uniform vec4 primitive_color_2;
global uniform vec4 primitive_color_3;
global uniform vec4 primitive_color_4;

//const vec4[5] colors = {primitive_color_0,primitive_color_1,primitive_color_2,primitive_color_3,primitive_color_4};"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2gvin"]
size = Vector2(523.279, 391.096)
expression = "
switch (idx){
	case 0: color = primitive_color_0; break;
	case 1: color = primitive_color_1; break;
	case 2: color = primitive_color_2; break;
	case 3: color = primitive_color_3; break;
	case 4: color = primitive_color_4; break;
};
"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_gihgg"]
operator = 2

[resource]
code = "shader_type canvas_item;
uniform int Color_Index : hint_range(0, 4);


// GlobalExpression:0
	global uniform vec4 primitive_color_0;
	global uniform vec4 primitive_color_1;
	global uniform vec4 primitive_color_2;
	global uniform vec4 primitive_color_3;
	global uniform vec4 primitive_color_4;
	
	//const vec4[5] colors = {primitive_color_0,primitive_color_1,primitive_color_2,primitive_color_3,primitive_color_4};

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);


// IntParameter:4
	int n_out4p0 = Color_Index;


	vec4 n_out6p0;
// Expression:6
	n_out6p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		
		switch (n_out4p0){
			case 0: n_out6p0 = primitive_color_0; break;
			case 1: n_out6p0 = primitive_color_1; break;
			case 2: n_out6p0 = primitive_color_2; break;
			case 3: n_out6p0 = primitive_color_3; break;
			case 4: n_out6p0 = primitive_color_4; break;
		};
		
	}


// VectorOp:7
	vec3 n_out7p0 = vec3(n_out3p0.xyz) * vec3(n_out6p0.xyz);


// Output:0
	COLOR.rgb = n_out7p0;


}
"
graph_offset = Vector2(-76.8827, 31.8614)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 340)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_8ka7i")
nodes/fragment/2/position = Vector2(-300, 200)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_u2s4v")
nodes/fragment/3/position = Vector2(60, 100)
nodes/fragment/4/node = SubResource("VisualShaderNodeIntParameter_7qqau")
nodes/fragment/4/position = Vector2(-560, 420)
nodes/fragment/5/node = SubResource("VisualShaderNodeGlobalExpression_sl58a")
nodes/fragment/5/position = Vector2(-740, 820)
nodes/fragment/5/size = Vector2(1218.27, 260.166)
nodes/fragment/5/input_ports = ""
nodes/fragment/5/output_ports = ""
nodes/fragment/5/expression = "global uniform vec4 primitive_color_0;
global uniform vec4 primitive_color_1;
global uniform vec4 primitive_color_2;
global uniform vec4 primitive_color_3;
global uniform vec4 primitive_color_4;

//const vec4[5] colors = {primitive_color_0,primitive_color_1,primitive_color_2,primitive_color_3,primitive_color_4};"
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_2gvin")
nodes/fragment/6/position = Vector2(-220, 380)
nodes/fragment/6/size = Vector2(523.279, 391.096)
nodes/fragment/6/input_ports = "0,1,idx;"
nodes/fragment/6/output_ports = "0,5,color;"
nodes/fragment/6/expression = "
switch (idx){
	case 0: color = primitive_color_0; break;
	case 1: color = primitive_color_1; break;
	case 2: color = primitive_color_2; break;
	case 3: color = primitive_color_3; break;
	case 4: color = primitive_color_4; break;
};
"
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorOp_gihgg")
nodes/fragment/7/position = Vector2(348.743, 374.416)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 2, 4, 0, 6, 0, 3, 0, 7, 0, 6, 0, 7, 1, 7, 0, 0, 0)
