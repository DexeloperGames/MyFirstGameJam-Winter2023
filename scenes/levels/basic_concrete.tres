[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://btq3p28nkdtly"]

[ext_resource type="Texture2D" uid="uid://1osw0swqqc6l" path="res://textures/Concrete024_1K_NormalGL.jpg" id="1_o7134"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_qusay"]
source = 5
texture = ExtResource("1_o7134")

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_w7l4v"]
parameter_name = "TextureParameterTriplanar"

[resource]
code = "shader_type spatial;
uniform sampler2D TextureParameterTriplanar;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
// TextureParameterTriplanar:3
	vec4 n_out3p0 = triplanar_texture(TextureParameterTriplanar, triplanar_power_normal, triplanar_pos);


// Output:0
	NORMAL_MAP = vec3(n_out3p0.xyz);


}
"
graph_offset = Vector2(-793.668, 201.104)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_qusay")
nodes/fragment/2/position = Vector2(-20, 400)
nodes/fragment/3/node = SubResource("VisualShaderNodeTextureParameterTriplanar_w7l4v")
nodes/fragment/3/position = Vector2(-400, 100)
nodes/fragment/connections = PackedInt32Array(3, 1, 2, 2, 3, 0, 0, 9)
